# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type Conversation {
  """Unique identifier for the resource."""
  id: ID!

  """Date and time when the resource was created."""
  createdAt: DateTime!

  """Date and time when the resource was last updated."""
  updatedAt: DateTime!

  """Get the first user of the conversation."""
  user1: User!

  """Get the second user of the conversation."""
  user2: User!

  """Get the last message of the conversation."""
  lastMessage: Message
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Message {
  """Unique identifier for the resource."""
  id: ID!

  """Date and time when the resource was created."""
  createdAt: DateTime!

  """Date and time when the resource was last updated."""
  updatedAt: DateTime!

  """Content of the message"""
  content: String!

  """The user who created the message."""
  user: User

  """The conversation the message belongs to."""
  conversation: Conversation
}

type Image {
  """Unique identifier for the resource."""
  id: ID!

  """Date and time when the resource was created."""
  createdAt: DateTime!

  """Date and time when the resource was last updated."""
  updatedAt: DateTime!

  """Key of image"""
  key: ID!

  """Blurhash of image"""
  blurhash: String!
}

type User {
  """Unique identifier for the resource."""
  id: ID!

  """Date and time when the resource was created."""
  createdAt: DateTime!

  """Date and time when the resource was last updated."""
  updatedAt: DateTime!

  """Username of user"""
  username: String!

  """Get all conversations of a user"""
  conversations: [Conversation!]!

  """Get all friends of a user"""
  friends: [User!]

  """Get all received requests of a user"""
  receivedRequests: [User!]

  """Get all sent requests of a user"""
  sentRequests: [User!]

  """Avatar of a user"""
  avatar: Image
}

type PaginationMessage {
  """Total number of nodes"""
  totalCount: Int!
  nodes: [Message!]!
}

type TokensOutput {
  """Access Token of user"""
  accessToken: String!

  """Access Token of user"""
  refreshToken: String!
}

type SignInOutput {
  """Access Token of user"""
  accessToken: String!

  """Access Token of user"""
  refreshToken: String!

  """Current user"""
  user: User!
}

type SignUpOutput {
  """Access Token of user"""
  accessToken: String!

  """Access Token of user"""
  refreshToken: String!

  """Current user"""
  user: User!
}

type Query {
  """Get a user by args"""
  FindOneUser(input: FindOneUserInput!): User

  """Find one conversation by id."""
  FindOneConversation(
    """Id of conversation"""
    id: ID
  ): Conversation

  """Find one message by id."""
  FindOneMessage(
    """Id of message"""
    id: ID
  ): Message

  """Pagination of messages."""
  PaginationMessage(
    """Skip the first n nodes"""
    skip: Int!

    """Take the first n nodes"""
    take: Int!

    """Sort nodes"""
    sortBy: PaginationSortBy
    where: [PaginationMessageWhere]
  ): PaginationMessage!

  """Logout current user"""
  Logout: Boolean!

  """Get current user"""
  Profile: User

  """Refresh Tokens of current user"""
  RefreshTokens: TokensOutput!
}

input FindOneUserInput {
  """Id of user"""
  id: ID

  """Username of user"""
  username: String
}

input PaginationSortBy {
  """Sort by date of creation"""
  createdAt: SortDirection

  """Sort by date of last update"""
  updatedAt: SortDirection
}

enum SortDirection {
  ASC
  DESC
}

input PaginationMessageWhere {
  """Filter by id"""
  id: ID

  """Filter by Conversation Id"""
  conversationId: ID

  """Filter by createdAt date"""
  createdAt: DateTime
}

type Mutation {
  """Update a user"""
  UpdateUser(input: UpdateUserInput!): User

  """Delete a user"""
  DeleteUser: User

  """Accept a friend request"""
  AcceptFriendRequest(
    """Id of user"""
    id: ID!
  ): User

  """Decline a friend request"""
  DeclineFriendRequest(
    """Id of user"""
    id: ID!
  ): User

  """Cancel a friend request"""
  CancelFriendRequest(
    """Id of user"""
    id: ID!
  ): User

  """Send a friend request"""
  SendFriendRequest(
    """Username of user"""
    username: String!
  ): User

  """Remove a friend"""
  RemoveFriend(
    """Id of user"""
    id: ID!
  ): User

  """Create a new conversation."""
  CreateConversation(input: CreateConversationInput!): Conversation!

  """Delete a conversation by id."""
  DeleteConversation(
    """Id of conversation"""
    id: ID
  ): ID

  """Create a new message."""
  CreateMessage(input: CreateMessageInput!): Message!

  """Delete a message by id."""
  DeleteMessage(
    """Id of message"""
    id: ID
  ): ID

  """Sign up User"""
  SignUp(input: CreateUserInput!): SignUpOutput!

  """Sign in User"""
  SignIn(
    """Username of user"""
    username: String!

    """Password of user"""
    password: String!
  ): SignInOutput!
}

input UpdateUserInput {
  """Username of user"""
  username: String

  """Password of user"""
  password: String

  """Avatar of user"""
  avatar: Upload
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

input CreateConversationInput {
  """The user that will be part of the conversation."""
  userId: ID!
}

input CreateMessageInput {
  """Content of the message"""
  content: String!

  """ID of the conversation"""
  conversationId: ID!
}

input CreateUserInput {
  """Username of user"""
  username: String!

  """Password of user"""
  password: String!
}